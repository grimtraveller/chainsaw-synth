/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __PLUGINPROCESSOR_H_526ED7A9__
#define __PLUGINPROCESSOR_H_526ED7A9__

#include "../jucegui/JucePluginCharacteristics.h"
#include <juce/juce_amalgamated.h>
#include <VoiceManager.h>

//==============================================================================
/**
*/
class ChainsawAudioProcessor  : public AudioProcessor
{
public:
	enum {
		STEREO_SPREAD,
		DETUNE,
		OCTAVE_SPREAD,
		NUM_OSCILLATORS,
		VOL_ATTACK,
		VOL_DECAY,
		VOL_SUSTAIN,
		VOL_RELEASE,
		FILTER_RESONANCE,
		FILTER_CUTOFF,
		OSC1_TYPE,
		OSC1_VOLUME,
		OSC1_OCTAVE,
		OSC2_TYPE,
		OSC2_VOLUME,
		OSC2_OCTAVE,
		OSC3_TYPE,
		OSC3_VOLUME,
		OSC3_OCTAVE,
		OSC4_TYPE,
		OSC4_VOLUME,
		OSC4_OCTAVE,

		NUM_CHAINSAW_PARAMETERS
	} ChainsawParams;
    //==============================================================================
    ChainsawAudioProcessor();
    ~ChainsawAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock);
    void releaseResources();

    void processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages);

    //==============================================================================
    AudioProcessorEditor* createEditor();

    //==============================================================================
    const String getName() const        { return JucePlugin_Name; }

    int getNumParameters();
    float getParameter (int index);
    void setParameter (int index, float newValue);
    const String getParameterName (int index);
    const String getParameterText (int index);

    const String getInputChannelName (const int channelIndex) const;
    const String getOutputChannelName (const int channelIndex) const;
    bool isInputChannelStereoPair (int index) const;
    bool isOutputChannelStereoPair (int index) const;

    bool acceptsMidi() const;
    bool producesMidi() const;

    //==============================================================================
    int getNumPrograms()                                        { return 0; }
    int getCurrentProgram()                                     { return 0; }
    void setCurrentProgram (int index)                          { }
    const String getProgramName (int index)                     { return String::empty; }
    void changeProgramName (int index, const String& newName)   { }

    //==============================================================================
    void getStateInformation (MemoryBlock& destData);
    void setStateInformation (const void* data, int sizeInBytes);

    //==============================================================================
    // These properties are public so that our editor component can access them
    // A bit of a hacky way to do it, but it's only a demo! Obviously in your own
    // code you'll do this much more neatly..

    // this is kept up to date with the midi messages that arrive, and the UI component
    // registers with it so it can represent the incoming messages
    MidiKeyboardState keyboardState;

    // this keeps a copy of the last set of time info that was acquired during an audio
    // callback - the UI component will read this and display it.
    AudioPlayHead::CurrentPositionInfo lastPosInfo;

    // these are used to persist the UI's size - the values are stored along with the
    // filter's other parameters, and the UI component will update them when it gets
    // resized.
    int lastUIWidth, lastUIHeight;

    //==============================================================================

    //==============================================================================
    juce_UseDebuggingNewOperator
private:
    VoiceManager vm;
    Parameters p;
    Buffer b;

};



#endif  // __PLUGINPROCESSOR_H_526ED7A9__
